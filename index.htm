<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Slider Puzzle</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body {
      background: #111;
      color: white;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 0;
      padding: 10px;
    }
    #puzzle-container {
      width: 90vmin;
      height: 90vmin;
      max-width: 400px;
      max-height: 400px;
      position: relative;
    }
    #puzzle {
      display: grid;
      width: 100%;
      height: 100%;
      gap: 2px;
    }
    .tile {
      background-size: 100% 100%;
      background-repeat: no-repeat;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2vmin;
      color: white;
      user-select: none;
      cursor: pointer;
      border: 1px solid #000;
      transition: transform 0.3s ease;
    }
    .empty {
      background: black;
      cursor: default;
    }
    #controls {
      margin-top: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 6px;
    }
    select, button, label {
      margin: 3px;
    }
    .inline {
      display: inline-block;
      margin: 0 5px;
    }
  </style>
</head>
<body>
  <h2>Slider Puzzle</h2>
  <div id="puzzle-container"><div id="puzzle"></div></div>

  <div id="controls">
    <div>
      <label>Grid:
        <select id="gridSize">
          <option value="3">3Ã—3</option>
          <option value="4" selected>4Ã—4</option>
          <option value="5">5Ã—5</option>
        </select>
      </label>
      <label>Difficulty:
        <select id="difficulty">
          <option value="10">Easy</option>
          <option value="40" selected>Medium</option>
          <option value="100">Hard</option>
        </select>
      </label>
    </div>
    <button id="resetBtn">Shuffle</button>
    <button id="solveBtn">Solve</button>
    <label><input type="checkbox" id="toggleNumbers" checked /> Show Numbers</label>
    <div id="moveCount">Moves: 0</div>
    <div id="timer">Time: 00:00</div>
    <div id="bestTime">Best: --:--</div>
  </div>

<script>
const puzzle = document.getElementById('puzzle');
const resetBtn = document.getElementById('resetBtn');
const solveBtn = document.getElementById('solveBtn');
const toggleNumbers = document.getElementById('toggleNumbers');
const moveCountEl = document.getElementById('moveCount');
const timerEl = document.getElementById('timer');
const bestTimeEl = document.getElementById('bestTime');
const gridSizeSelect = document.getElementById('gridSize');
const difficultySelect = document.getElementById('difficulty');

const images = [
  'wreck_it_rach.png', // add more images here as you want
];

let tiles = [];
let emptyIndex = 0;
let moves = 0;
let size = 4;
let shuffleMoves = 40;
let startTime, timerInterval;
let currentImage = '';
let imgLoaded = false;

function chooseImage() {
  currentImage = images[Math.floor(Math.random() * images.length)];
}

function preloadImage(src) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = src;
  });
}

async function setupGame() {
  chooseImage();
  try {
    await preloadImage(currentImage);
    imgLoaded = true;
  } catch (e) {
    alert('Failed to load image: ' + currentImage);
    return;
  }

  shuffleMoves = parseInt(difficultySelect.value);
  createTiles();
  loadBestTime();
  // Show solved state first, then shuffle after a short delay
  setTimeout(shuffleTiles, 500);
}

function createTiles() {
  tiles = [];
  moves = 0;
  moveCountEl.textContent = 'Moves: 0';
  size = parseInt(gridSizeSelect.value);
  puzzle.style.gridTemplateColumns = `repeat(${size}, 1fr)`;
  puzzle.style.gridTemplateRows = `repeat(${size}, 1fr)`;
  emptyIndex = size * size - 1;

  for (let i = 0; i < size * size; i++) {
    const tile = document.createElement('div');
    tile.className = 'tile';
    tile.dataset.original = i;
    if (i === emptyIndex) tile.classList.add('empty');
    tiles.push(tile);
  }

  drawTiles();
}

function drawTiles() {
  if (!imgLoaded) return;

  puzzle.innerHTML = '';
  tiles.forEach((tile, i) => {
    const original = parseInt(tile.dataset.original);
    const x = original % size;
    const y = Math.floor(original / size);
    tile.style.backgroundImage = `url(${currentImage})`;
    tile.style.backgroundSize = `${size * 100}% ${size * 100}%`;
    tile.style.backgroundPosition = `${(-x * 100) / (size - 1)}% ${(-y * 100) / (size - 1)}%`;

    tile.textContent =
      !tile.classList.contains('empty') && toggleNumbers.checked ? original + 1 : '';
    puzzle.appendChild(tile);
  });
}

function isAdjacent(i1, i2) {
  const x1 = i1 % size, y1 = Math.floor(i1 / size);
  const x2 = i2 % size, y2 = Math.floor(i2 / size);
  return Math.abs(x1 - x2) + Math.abs(y1 - y2) === 1;
}

function playSwoosh() {
  const ctx = new AudioContext();
  const osc = ctx.createOscillator();
  const gain = ctx.createGain();
  osc.type = 'triangle';
  osc.frequency.setValueAtTime(300, ctx.currentTime);
  osc.frequency.exponentialRampToValueAtTime(40, ctx.currentTime + 0.15);
  gain.gain.setValueAtTime(0.3, ctx.currentTime);
  gain.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + 0.15);
  osc.connect(gain);
  gain.connect(ctx.destination);
  osc.start();
  osc.stop(ctx.currentTime + 0.2);
}

async function swapTiles(i, j) {
  const tileA = tiles[i];
  const tileB = tiles[j];

  const rectA = tileA.getBoundingClientRect();
  const rectB = tileB.getBoundingClientRect();
  const dx = rectB.left - rectA.left;
  const dy = rectB.top - rectA.top;

  tileA.style.transition = 'transform 0.3s ease';
  tileB.style.transition = 'transform 0.3s ease';
  tileA.style.transform = `translate(${dx}px, ${dy}px)`;
  tileB.style.transform = `translate(${-dx}px, ${-dy}px)`;

  await new Promise(resolve => setTimeout(resolve, 300));

  tileA.style.transition = '';
  tileB.style.transition = '';
  tileA.style.transform = '';
  tileB.style.transform = '';

  [tiles[i], tiles[j]] = [tiles[j], tiles[i]];
  drawTiles();
}

async function shuffleTiles() {
  let emptyPos = emptyIndex;
  for (let i = 0; i < shuffleMoves; i++) {
    const neighbors = [];
    if (emptyPos % size > 0) neighbors.push(emptyPos - 1);
    if (emptyPos % size < size - 1) neighbors.push(emptyPos + 1);
    if (emptyPos - size >= 0) neighbors.push(emptyPos - size);
    if (emptyPos + size < size * size) neighbors.push(emptyPos + size);

    const swapIndex = neighbors[Math.floor(Math.random() * neighbors.length)];
    await swapTiles(emptyPos, swapIndex);
    emptyPos = swapIndex;
    playSwoosh();
    await new Promise(res => setTimeout(res, 20));
  }
  emptyIndex = emptyPos;
  startTimer();
}

function moveTile(i) {
  const eIdx = tiles.findIndex(t => t.classList.contains('empty'));
  if (!isAdjacent(i, eIdx)) return;
  [tiles[i], tiles[eIdx]] = [tiles[eIdx], tiles[i]];
  moves++;
  moveCountEl.textContent = 'Moves: ' + moves;
  playSwoosh();
  drawTiles();
  if (checkWin()) {
    clearInterval(timerInterval);
    const time = timerEl.textContent.split(' ')[1] || timerEl.textContent.replace('Time: ', '');
    alert(`ðŸŽ‰ Solved in ${moves} moves and ${time}!`);
    checkBestTime(time);
  }
}

function checkWin() {
  return tiles.every((t, i) =>
    t.classList.contains('empty') ? i === tiles.length - 1 : parseInt(t.dataset.original) === i
  );
}

function startTimer() {
  clearInterval(timerInterval);
  startTime = Date.now();
  timerInterval = setInterval(() => {
    const elapsed = Date.now() - startTime;
    const s = Math.floor(elapsed / 1000) % 60;
    const m = Math.floor(elapsed / 60000);
    timerEl.textContent = `Time: ${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
  }, 500);
}

function checkBestTime(currentTime) {
  const key = `best_${size}x${size}`;
  const best = localStorage.getItem(key);
  if (!best || currentTime < best) {
    localStorage.setItem(key, currentTime);
    bestTimeEl.textContent = 'Best: ' + currentTime;
  }
}

function loadBestTime() {
  const key = `best_${size}x${size}`;
  const best = localStorage.getItem(key);
  bestTimeEl.textContent = 'Best: ' + (best || '--:--');
}

// Event listeners
puzzle.addEventListener('pointerdown', e => {
  const tile = e.target;
  if (!tile.classList.contains('tile') || tile.classList.contains('empty')) return;
  const i = tiles.indexOf(tile);
  moveTile(i);
});

toggleNumbers.addEventListener('change', drawTiles);
gridSizeSelect.addEventListener('change', setupGame);
difficultySelect.addEventListener('change', () => {
  shuffleMoves = parseInt(difficultySelect.value);
});
resetBtn.addEventListener('click', () => setupGame());
solveBtn.addEventListener('click', () => {
  tiles.sort((a, b) => parseInt(a.dataset.original) - parseInt(b.dataset.original));
  drawTiles();
  clearInterval(timerInterval);
  timerEl.textContent = 'Time: 00:00';
  moves = 0;
  moveCountEl.textContent = 'Moves: 0';
});

setupGame();
</script>
</body>
</html>
