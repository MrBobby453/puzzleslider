<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Slider Puzzle Game</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background: #222;
      margin: 0;
    }
    #puzzle {
      display: grid;
      grid-template-columns: repeat(4, 100px);
      grid-template-rows: repeat(4, 100px);
      gap: 2px;
    }
    .tile {
      width: 100px;
      height: 100px;
      background-image: url('/mnt/data/wreck it rach.png');
      background-size: 400px 400px;
      cursor: pointer;
      border: 1px solid #000;
      user-select: none;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      color: white;
    }
    .empty {
      background: #000;
      cursor: default;
    }
  </style>
</head>
<body>
  <div id="puzzle"></div>
  <script>
    const puzzle = document.getElementById('puzzle');
    const size = 4;
    let tiles = [];
    let emptyIndex = size * size - 1;

    function createTiles() {
      tiles = [];
      for (let i = 0; i < size * size; i++) {
        const tile = document.createElement('div');
        tile.className = 'tile';
        tile.dataset.original = i;
        if (i === emptyIndex) {
          tile.classList.add('empty');
        } else {
          const x = i % size;
          const y = Math.floor(i / size);
          tile.style.backgroundPosition = `-${x * 100}px -${y * 100}px`;
        }
        tiles.push(tile);
      }
      shuffleTiles();
      drawTiles();
    }

    function shuffleTiles() {
      do {
        for (let i = tiles.length - 2; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [tiles[i], tiles[j]] = [tiles[j], tiles[i]];
        }
        emptyIndex = tiles.findIndex(t => t.classList.contains('empty'));
      } while (!isSolvable());
    }

    function isSolvable() {
      const arr = tiles.map(t => t.classList.contains('empty') ? 0 : parseInt(t.dataset.original) + 1);
      let inv = 0;
      for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
          if (arr[i] && arr[j] && arr[i] > arr[j]) inv++;
        }
      }
      const row = Math.floor(emptyIndex / size);
      return (inv + row) % 2 === 0;
    }

    function drawTiles() {
      puzzle.innerHTML = '';
      tiles.forEach((tile, i) => {
        tile.dataset.index = i;
        puzzle.appendChild(tile);
      });
    }

    function isAdjacent(i1, i2) {
      const x1 = i1 % size, y1 = Math.floor(i1 / size);
      const x2 = i2 % size, y2 = Math.floor(i2 / size);
      return (Math.abs(x1 - x2) + Math.abs(y1 - y2)) === 1;
    }

    function checkWin() {
      for (let i = 0; i < tiles.length; i++) {
        const orig = parseInt(tiles[i].dataset.original);
        if (tiles[i].classList.contains('empty')) {
          if (i !== tiles.length - 1) return false;
        } else if (orig !== i) return false;
      }
      return true;
    }

    puzzle.addEventListener('click', e => {
      const tile = e.target;
      if (!tile.classList.contains('tile') || tile.classList.contains('empty')) return;
      const i = tiles.indexOf(tile);
      const emptyTile = tiles.find(t => t.classList.contains('empty'));
      const eIdx = tiles.indexOf(emptyTile);
      if (isAdjacent(i, eIdx)) {
        [tiles[i], tiles[eIdx]] = [tiles[eIdx], tiles[i]];
        drawTiles();
        if (checkWin()) alert('Congratulations! You solved the puzzle!');
      }
    });

    createTiles();
  </script>
</body>
</html>
