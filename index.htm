<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Slider Puzzle</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body {
      background: #111;
      color: white;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 0;
      padding: 10px;
    }
    #puzzle-container {
      width: 90vmin;
      height: 90vmin;
      max-width: 400px;
      max-height: 400px;
      position: relative;
    }
    #puzzle {
      display: grid;
      width: 100%;
      height: 100%;
      gap: 2px;
    }
    .tile {
      background-size: 100% 100%;
      background-repeat: no-repeat;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2vmin;
      color: white;
      user-select: none;
      cursor: pointer;
      border: 1px solid #000;
      transition: transform 0.3s ease;
    }
    .empty {
      background: black;
      cursor: default;
    }
    #controls {
      margin-top: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 6px;
    }
    select, button, label {
      margin: 3px;
    }
    .inline {
      display: inline-block;
      margin: 0 5px;
    }
  </style>
</head>
<body>
  <h2>Slider Puzzle</h2>
  <div id="puzzle-container"><div id="puzzle"></div></div>

  <div id="controls">
    <div>
      <label>Grid:
        <select id="gridSize">
          <option value="3">3×3</option>
          <option value="4" selected>4×4</option>
          <option value="5">5×5</option>
        </select>
      </label>
      <label>Difficulty:
        <select id="difficulty">
          <option value="10">Easy</option>
          <option value="40" selected>Medium</option>
          <option value="100">Hard</option>
        </select>
      </label>
    </div>
    <button id="resetBtn">Shuffle</button>
    <button id="solveBtn">Solve</button>
    <label><input type="checkbox" id="toggleNumbers" checked /> Show Numbers</label>
    <div id="moveCount">Moves: 0</div>
    <div id="timer">Time: 00:00</div>
    <div id="bestTime">Best: --:--</div>
  </div>

<script>
const images = [
  'wreck_it_rach.png',
  // add more here if you want later
];

let imgLoaded = false;

function preloadImage(src) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = src;
  });
}

async function setupGame() {
  chooseImage();
  try {
    await preloadImage(currentImage);
    imgLoaded = true;
  } catch (e) {
    alert('Failed to load image: ' + currentImage);
    return;
  }

  shuffleMoves = parseInt(difficultySelect.value);
  createTiles();
  loadBestTime();
  // Delay shuffleTiles so user sees solved image first
  setTimeout(shuffleTiles, 500);
}

function createTiles() {
  tiles = [];
  moves = 0;
  moveCountEl.textContent = 'Moves: 0';
  size = parseInt(gridSizeSelect.value);
  puzzle.style.gridTemplateColumns = `repeat(${size}, 1fr)`;
  puzzle.style.gridTemplateRows = `repeat(${size}, 1fr)`;
  emptyIndex = size * size - 1;

  for (let i = 0; i < size * size; i++) {
    const tile = document.createElement('div');
    tile.className = 'tile';
    tile.dataset.original = i;
    if (i === emptyIndex) tile.classList.add('empty');
    tiles.push(tile);
  }

  drawTiles();
}

function drawTiles() {
  if (!imgLoaded) return; // wait for image to load

  puzzle.innerHTML = '';
  tiles.forEach((tile, i) => {
    const original = parseInt(tile.dataset.original);
    const x = original % size;
    const y = Math.floor(original / size);
    tile.style.backgroundImage = `url(${currentImage})`;
    tile.style.backgroundSize = `${size * 100}% ${size * 100}%`;
    tile.style.backgroundPosition = `${(-x * 100) / (size - 1)}% ${(-y * 100) / (size - 1)}%`;

    tile.textContent =
      !tile.classList.contains('empty') && toggleNumbers.checked ? original + 1 : '';
    puzzle.appendChild(tile);
  });

setupGame();
}
  
</script>
</body>
</html>
